##### Instalación y configuración de Mezzanine - CMC basado en Django #####

Sitio Oficial --> http://mezzanine.jupo.org/

####################################################
##### Instalación en GNU/Linux Debian 7 Wheezy #####
####################################################

# apt-get update

# apt-get install build-essential

# apt-get install cvs subversion git-core mercurial

# apt-get install python-setuptools python-dev python2.7-dev python-virtualenv python-software-properties libpq-dev libjpeg-dev python-imaging

# apt-get install libtiff4-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev

# curl https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py | python - // Opcional

# curl https://raw.github.com/pypa/pip/master/contrib/get-pip.py | python - // Opcional

####################################################
##### Instalación en GNU/Linux Debian 8 Jessie #####
####################################################

# apt-get install build-essential

# apt-get install cvs subversion git-core mercurial

# apt-get install python-dev python-setuptools python2.7-dev python-software-properties libpq-dev libjpeg-dev python-imaging

# apt-get install libtiff5 libjpeg-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev python-pip pillow-pil

$ pip install mezzanine

$ pip install html5lib==0.999999999 // Si da problemas con html5parser e import keyviews al hacer una publicación

##################################################################
##### Instalación en GNU/Linux Debian 8 Jessie versión-corta #####
##################################################################

# apt-get install python-software-properties build-essential python python-dev libjpeg62-turbo-dev libssl-dev pillow-pil

# apt-get install python-pip

# pip install mezzanine

# aptitude install postgresql postgresql-server

# aptitude install python-psycopg2

# pip install postgres

# pip install db-psycopg2

#####################################
##### Usando un entorno virtual #####
#####################################

- Creamos un entorno virtual

$ virtualenv mezzanine_env

$ cd mezzanine_env

$ source /bin/activate

- Dentro del entorno virtual instalamos mezzanine

(mezzanine_env)$ pip install mezzanine

##### Creamos un nuevo proyecto mezzanine #####

...En otro directorio

(mezzanine_env)$ mezzanine-project mezzanine_project

(mezzanine_env)$ cd mezzanine_project

(mezzanine_env)$ python manage.py migrate

(mezzanine_env)$ python manage.py createsuperuser

add username, mail and password...

##### Corremos el servidor de pruebas #####

(mezzanine_env)$ python manage.py runserver 0.0.0.0:8000

######################################
##### Instalar django-feedparser #####
######################################

Nos sirve para importar RSS automaticamente a nuestro proyecto, como una manera de migrar post de un
sitio a otro.

Simply run the import_rss command where the rss-url argument contains the URL for your RSS feed:

$ python manage.py import_rss --mezzanine-user=.. --rss-url=url

note: http://www.thel.gob.ve/rss.xml

$ sudo pip install django-feedparser

$ sudo pip install feedparser

$ sudo pip install python-dateutil

###########################################
##### Añadiendo/Creando un nuevo tema #####
###########################################

Creamos una aplicación de Django, genérica, creamos los directorios (templates y static) correspondientes

$ python manage.py startapp app_name

Agregamos la aplicación/tema creado al principio de las INSTALLED_APPS en el settings.py del proyecto (importante)

Si tenemos un tema descargado, agregaremos sus plantillas y estáticos a nuestra aplicación creada.

##### Estructura de una app/tema #####

└── tema
    ├── admin.py
    ├── admin.pyc
    ├── apps.py
    ├── __init__.py
    ├── __init__.pyc
    ├── migrations
    │   ├── __init__.py
    │   └── __init__.pyc
    ├── models.py
    ├── models.pyc
    ├── templates
    │   ├── base.html
    │   ├── index.html
    │   └── search_results.html
    ├── tests.py
    └── views.py

##############################################
##### Templates a usar en un tema propio #####
##############################################

/usr/local/lib/python2.7/dist-packages/mezzanine/core/templates // Desde sistema base
/usr/local/lib/python2.7/dist-packages/mezzanine/blog/templates/blog/ // Desde sistema base

/Entornos_virtuales/mezzanine/lib/python2.7/site-packages/mezzanine/core/templates // Desde entornos virtuales
/Entornos_virtuales/mezzanine/local/lib/python2.7/site-packages/mezzanine/blog/templates/blog/ // Desde entornos virtuales

########################################
##### Poner la interfáz en español #####
########################################

En el settings.py

# Language code for this installation. All choices can be found here:
# http://www.i18nguy.com/unicode/language-identifiers.html
#LANGUAGE_CODE = "en"
#LANGUAGE_CODE = "es-VE"
LANGUAGE_CODE = "ES"


# Supported languages
LANGUAGES = (
    #('en', _('English')),
    ('es', _('Spanish')),
)

###############################
##### Galeria de Imagenes #####
###############################

-Las imagenes que se suben a la galeria se guardan en mezzanine_project/static/media/uploads

-La geleria solo acepta imagenes en formatos: jpg, jpeg, png
es decir, en minusculas y no en .JPG, JPEG, PNG.

###################################################
##### Añadiendo compatibilidad con postgresql #####
###################################################

# aptitude install postgresql postgresql-server

# aptitude install python-psycopg2

# pip install postgres

# pip install db-psycopg2

--- Añadiendo la db de postgres ---

Editar el local_settings.py

DATABASES = {
    "default": {
        # Ends with "postgresql_psycopg2", "mysql", "sqlite3" or "oracle".
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        # DB name or path to database file if using sqlite3.
        "NAME": "xxx",
        # Not used with sqlite3.
        "USER": "xxx",
        # Not used with sqlite3.
        "PASSWORD": "p4ssw0rd",
        # Set to empty string for localhost. Not used with sqlite3.
        "HOST": "127.0.0.1",
        # Set to empty string for default. Not used with sqlite3.
        "PORT": "",
    }
}

##########################################################
##### Redirección a https para las páginas del admin #####
##########################################################

Variable del settings.py

# SECURE_SSL_REDIRECT If set to True, causes SecurityMiddleware to redirect all non-HTTPS requests to https
#SECURE_SSL_REDIRECT = True
#SECURE_REDIRECT_EXEMPT = ['^(?!administrador).*$']

############################
##### Tiempo de sesión #####
############################

Variable del settings.py que indica que a los 40min se destruye la sesión creada de algun usuario autenticado.

# SESSION AGE 40 Minutes
#SESSION_COOKIE_AGE = 40*60

################
##### Tips #####
################

- El Nombre del sitio y descripción configurado en las opciones del panel de administración será mostrado en la pestaña de inicio.

- Los posts/publicaciones siempre estaran disponibles desde la url /blog

- Para permitir embeber videos y usar etiquetas html en el cuerpo de los post se debe desactivar el filto de texto enrriquecido en las
opciones del panel de administracion.

- En entorno de desarrollo, configurar la variable del settings ALLOWED_HOSTS = ["*"] para que no de problemas el servidor de desarrollo
con el host que levanta.

- Para habilitar el acceso al sitio administrativo a los nuevos usuarios (publicadores) se les debe dar permisos del sitio también (example.com).

- Para habilitar las miniaturas de los post, en settings.py:
# BLOG_USE_FEATURED_IMAGE = True
BLOG_USE_FEATURED_IMAGE = True
y se sube una imagen destacada a la noticia para que la muestre en el post_list y en el post_detail

- El widget del twitter timeline no funciona cuando se está en modo incógnito porque bloquea el rastreo.

- Agregar el dominio, ya sea del servidor de desarrollo o de pruebas en el Sites del panel de administración (junto a example.com) para que queden listas varias funcionalidades.

- /usr/local/lib/python2.7/dist-packages/mezzanine // Ruta de instalación de mezzanine.

- El DEBUG = True y DATABASES = {...} funcionales son los de local_settings.py no los del settings.py

#################################################
##### Colectando los estaticos del servidor #####
#################################################

 Para copiar todos los estáticos requeridos por el servidor a la carpeta /statc creada manualmente
 y definida en el settings usamos:

$ python manage.py collectstatic

Esto copiara todos los ficheros estáticos usados por el servidor hacia la carpeta /static de nuestro proyecto
donde serán manipulados por nosotros y así podremos agregar nuestros estáticos determinados

#####################################
##### Captcha en el login admin #####
#####################################

- Se instala django-simple-captcha==0.5.5 y se agrega a las apps instaladas

OPTIONAL_APPS = (
    #"debug_toolbar",
    #"django_extensions",
    "compressor",
    #"captcha",
    PACKAGE_NAME_FILEBROWSER,
    PACKAGE_NAME_GRAPPELLI,
)

- Se agrega la url del captcha a las urls del proyecto:

urlpatterns = i18n_patterns(
    # Change the admin prefix here to use an alternate URL for the
    # admin interface, which would be marginally more secure.
    url("^admin/", include(admin.site.urls)),
    url(r'^captcha/', include('captcha.urls'))
)

- Se agrega el campo captcha en el core de django:

En /usr/local/lib/python2.7/dist-packages/django/contrib/auth/forms.py

from captcha.fields import CaptchaField

class AuthenticationForm(forms.Form):
    """
    Base class for authenticating users. Extend this to get a form that accepts
    username/password logins.
    """
    username = UsernameField(
        max_length=254,
        widget=forms.TextInput(attrs={'autofocus': ''}),
    )
    password = forms.CharField(
        label=_("Password"),
        strip=False,
        widget=forms.PasswordInput,
    )

    captcha = CaptchaField()
.
.
.
